@page "/"
@using Azure;
@using Azure.AI.FormRecognizer.DocumentAnalysis;
@using dotenv.net
@using OpenAI.Chat
@using System.Text.RegularExpressions;
@using System.Text.Json;
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IWebHostEnvironment FileEnvironment

<PageTitle>MemorEyes</PageTitle>

<div style="text-align: center; " class="mainPageText">
    <img src="MemorEyes.png" alt="MemorEyes logo" style="max-width: 60%; height: auto;">
</div>


<div style="text-align: center; font-family: Trebuchet MS; display: flex; flex-direction: column; align-items: center;">
    <p style="margin-top: 20px; margin-bottom: 10px;">Upload your handwritten notes:</p>
    <InputFile OnChange="LoadFiles" multiple style="margin-left: 75px;"/>
</div>

<p style="margin-top: 10px; text-align: center; font-family: Trebuchet MS; font-size: small;">
    Max file size: 4 MB<br>
    Max allowed files: @maxAllowedFiles
</p>

<div style="text-align: center;">
    <a href="/manage-flashcards" style="margin-top: 50px; font-family: Trebuchet MS; display: inline-block; padding: 10px 20px; background-color: #94c6ff; color: white; text-align: center; text-decoration: none; border-radius: 5px;">
        Submit
    </a>
</div>


@code {
    private long maxFileSize = 4000000;
    private int maxAllowedFiles = 3;

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        List<String> loadedFiles = new();
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
            try {
                var path = Path.Combine(FileEnvironment.ContentRootPath,
                    FileEnvironment.EnvironmentName, "unsafe_uploads", file.Name);
                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0) {
                    totalRead += bytesRead;
                    await writeStream.WriteAsync(buffer, 0, bytesRead);
                }

                loadedFiles.Add(file.Name);


            }
            catch (Exception ex) {
                Console.WriteLine(ex);
            }
        }
        string json = JsonSerializer.Serialize(loadedFiles);
        await localStorage.SetItemAsStringAsync("loadedFiles", json);
    }
    
}