@page "/"
@using Azure;
@using Azure.AI.FormRecognizer.DocumentAnalysis;
@using dotenv.net
@using OpenAI.Chat
@using System.Text.RegularExpressions;
@rendermode InteractiveServer
@inject IWebHostEnvironment FileEnvironment

<PageTitle>MemorEyes</PageTitle>

<div style="text-align: center; " class="mainPageText">
    <img src="MemorEyes.png" alt="MemorEyes logo" style="max-width: 60%; height: auto;">
</div>


<div style="text-align: center; font-family: Trebuchet MS; display: flex; flex-direction: column; align-items: center;">
    <p style="margin-top: 20px; margin-bottom: 10px;">Upload your handwritten notes:</p>
    <InputFile OnChange="LoadFiles" multiple style="margin-left: 75px;"/>
</div>

<p style="margin-top: 10px; text-align: center; font-family: Trebuchet MS; font-size: small;">
    Max file size: 4 MB<br>
    Max allowed files: @maxAllowedFiles
</p>

@if (isLoading) {
    <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
}
else {
    <ul>
        @foreach (var file in loadedFiles) {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();

    private long maxFileSize = 4000000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private decimal progressPercent;
    private List<FlashCard> generatedFlashCards = new List<FlashCard>();

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        isLoading = true;
        loadedFiles.Clear();
        progressPercent = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
            try {
                var path = Path.Combine(FileEnvironment.ContentRootPath,
                    FileEnvironment.EnvironmentName, "unsafe_uploads", file.Name);
                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0) {
                    totalRead += bytesRead;
                    await writeStream.WriteAsync(buffer, 0, bytesRead);
                    progressPercent = Decimal.Divide(totalRead, file.Size);
                    StateHasChanged();
                }

                loadedFiles.Add(file);


            }
            catch (Exception ex) {
                Console.WriteLine(ex);
            }
        }
        OCRLand();
        isLoading = false;
    }
    private async void OCRLand() {
        String OCRResult = "";
        var root = Directory.GetCurrentDirectory();
        var dotenv = Path.Combine(root, ".env");
        DotEnv.Load(options: new DotEnvOptions(envFilePaths: new[] {dotenv}));
        var envVars = DotEnv.Read();
        AzureKeyCredential credential = new AzureKeyCredential(envVars["key"]);
        DocumentAnalysisClient client = new DocumentAnalysisClient(new Uri(envVars["endpoint"]), credential);
        foreach(var file in loadedFiles) {
            var path = Path.Combine(FileEnvironment.ContentRootPath,FileEnvironment.EnvironmentName, "unsafe_uploads", file.Name);
            FileStream fileObj = new FileStream(path,FileMode.Open,FileAccess.Read,FileShare.Read);
            AnalyzeDocumentOperation operation = client.AnalyzeDocument(WaitUntil.Completed, "prebuilt-read",fileObj);
            AnalyzeResult result = operation.Value;
            OCRResult += result.Content;
            OCRResult += "\n";
        }
        Console.WriteLine(OCRResult);
        Console.WriteLine("========================================");
        GPTLand(envVars,OCRResult);

    }

    private async void GPTLand(IDictionary<string, string> envVars, string OCRResult) {

        StreamReader sr = new StreamReader(FileEnvironment.ContentRootPath+@"\prompt.txt");
        String prompt = sr.ReadToEnd() + OCRResult;


        ChatClient client = new(model: "gpt-4o-mini", envVars["gptKey"]);
        ChatCompletion completion = client.CompleteChat(prompt);
        Console.WriteLine(completion);
        FlashCardLand(completion.ToString());
    }
    private void FlashCardLand(String completion) {
        string titleRegex = @"(?<=T:\s)[^D:]+(?=\sD:)";
        string descriptionRegex = @"(?<=D:\s).*";
        MatchCollection titleMatches = Regex.Matches(completion, titleRegex);
        MatchCollection descriptionMatches = Regex.Matches(completion, descriptionRegex);
        for(var i = 0; i < titleMatches.Count; i++) {
            var currentTitleMatch = titleMatches[i].Groups[0].Value;
            var currentDescriptionMatch = descriptionMatches[i].Groups[0].Value;
            generatedFlashCards.Add(new FlashCard(currentTitleMatch, currentDescriptionMatch));
        }
    }
}