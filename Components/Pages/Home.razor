@page "/"
@using Azure;
@using Azure.AI.FormRecognizer.DocumentAnalysis;
@using dotenv.net
@rendermode InteractiveServer
@inject IWebHostEnvironment FileEnvironment

<PageTitle>MemorEyes</PageTitle>

<h1>MemorEyes Flashcard Generator</h1>

<p>
    Please upload your notes or take a picture.<br>
    Max file size: @maxFileSize bytes
</p>

<p>
    Max allowed files: @maxAllowedFiles
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles files of up to @maxFileSize bytes each:
        <InputFile OnChange="LoadFiles" multiple />
    </label>
</p>

@if (isLoading) {
    <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
}
else {
    <ul>
        @foreach (var file in loadedFiles) {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();

    private long maxFileSize = 20971520;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private decimal progressPercent;

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        isLoading = true;
        loadedFiles.Clear();
        progressPercent = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
            try {
                var path = Path.Combine(FileEnvironment.ContentRootPath,
                    FileEnvironment.EnvironmentName, "unsafe_uploads", file.Name);
                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0) {
                    totalRead += bytesRead;
                    await writeStream.WriteAsync(buffer, 0, bytesRead);
                    progressPercent = Decimal.Divide(totalRead, file.Size);
                    StateHasChanged();
                }

                loadedFiles.Add(file);


            }
            catch (Exception ex) {
                Console.WriteLine(ex);
            }
        }
        OCRLand();
        isLoading = false;
    }
    private async void OCRLand() {
        var root = Directory.GetCurrentDirectory();
        var dotenv = Path.Combine(root, ".env");

        DotEnv.Load(options: new DotEnvOptions(envFilePaths: new[] {dotenv}));
        var envVars = DotEnv.Read();

        Console.WriteLine(envVars["key"]);

        Console.WriteLine(envVars["endpoint"]);
    }
}