@page "/review-flashcards"
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.PixelFormats;
@using System.Text.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IWebHostEnvironment FileEnvironment
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3>Review Flashcards</h3>


@if(loadedFlashCards.Count != 0) {
    <Slide color='@loadedFlashCards.ElementAt(currentImagePosition).Color' content="@StringContent" OnClickCallback="ChangeContent" />
}
<div style="display:flex; flex-direction:row;">
    <button @onclick="DecreaseImage"> <img src="leftarrow.png" alt="Alternate Text" /> </button>
    <button @onclick="IncreaseImage"><img src="rightarrow.png" alt="Alternate Text" /> </button>
</div>



@code {
    int currentImagePosition = 0;
    String StringContent = "";
    List<FlashCard> loadedFlashCards = new List<FlashCard>();

    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {  
            try {
                loadedFlashCards = await localStorage.GetItemAsync<List<FlashCard>>("generatedFlashCards");
            }
            catch (Exception e) {
                NavManager.NavigateTo($"/");
            }
            if (loadedFlashCards != null) {
                StringContent = loadedFlashCards.ElementAt(currentImagePosition).Title;


                foreach (var card in loadedFlashCards) {
                    var rand = new Random();
                    var r = (byte)rand.Next(0, 127);
                    var g = (byte)rand.Next(0, 127);
                    var b = (byte)rand.Next(0, 127);

                    var generatedColor = new SixLabors.ImageSharp.Color(new Rgba32(r, g, b, 255)).ToHex();

                    card.Color = generatedColor;
                    StateHasChanged();
                }
                await localStorage.ClearAsync();
            }
        }



    }
    private void ChangeContent() {
        var title = loadedFlashCards.ElementAt(currentImagePosition).Title;
        var description = loadedFlashCards.ElementAt(currentImagePosition).Description;
        if (StringContent.Equals(title)) {
            StringContent = description;
        }
        else {
            StringContent = title;
        }
    }
    private void DecreaseImage() {
        currentImagePosition -= 1;
        if(!(currentImagePosition > 0)) {
            currentImagePosition = loadedFlashCards.Count-1;
        }
        StringContent = loadedFlashCards.ElementAt(currentImagePosition).Title;
        StateHasChanged();
  
    }
    private void IncreaseImage() {
        currentImagePosition += 1;
        if (!(currentImagePosition < loadedFlashCards.Count)) {
            currentImagePosition = 0;
        }
        StringContent = loadedFlashCards.ElementAt(currentImagePosition).Title;
        StateHasChanged();
    }

    



}
