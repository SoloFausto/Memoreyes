@page "/manage-flashcards"
@using Azure;
@using Azure.AI.FormRecognizer.DocumentAnalysis;
@using dotenv.net
@using OpenAI.Chat
@using System.Text.RegularExpressions;
@using System.Text.Json;
@rendermode InteractiveServer
@inject IWebHostEnvironment FileEnvironment
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager

<h3>Component</h3>
<div style="height: 85vh;display:flex;flex-direction:row">
    <div class="images" style="">
        <a href="#">
            @if (loadedFilePaths.Any())
            {
                <img src="@loadedFilePaths.First()" alt="Alternate Text" style="height:100%" />
            }
        </a>
        
    </div>
    <div style="display:flex;flex-direction:row;flex-grow: 1;">
        <div style="display:flex;flex-direction:column-reverse;flex-grow: 1; justify-content: center;">
            <button style="height: 50px;margin-bottom: 25px;margin-left: 25px;" @onclick="ReviewSlides" disabled="@flashCardButtonDisabled">@flashCardButtonText</button>
        </div>
        <div style="display:flex;flex-direction:column;flex-grow: 1;align-items: center;">
            <p>All the Generated Flashcards:</p>
            <table style="border: black;border-width: 5px;">
                @if (generatedFlashCards.Count != 0) {
                    foreach (var flashCard in generatedFlashCards) {
                    <tr>
                        <th>@flashCard.Title</th>
                        <th>
                                <button @onclick="@(()=>removeFlashCard(flashCard.Title))"> <img src="nonchalanttrashcan.png" alt="Alternate Text" /></button>
                        </th>
                            
                    </tr>
                    }
                }
            </table>
        </div>
    </div>
</div>


@code {
    protected bool flashCardButtonDisabled { get; set; }
    protected string flashCardButtonText { get; set; }
    private List<String> loadedFiles;
    private List<String> loadedFilePaths = new List<string>();
    private List<FlashCard> generatedFlashCards = new List<FlashCard>();

    protected override void OnInitialized() {
        base.OnInitialized();
    }
    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {
            flashCardButtonDisabled = true;
            flashCardButtonText = "Flashcards are being created...";
            string? loadedJson = await localStorage.GetItemAsStringAsync("loadedFiles");
            loadedFiles = JsonSerializer.Deserialize<List<String>>(loadedJson);
            if (loadedFiles != null) {
                foreach (var filename in loadedFiles) {

                    loadedFilePaths.Add("/unsafe_uploads/" + filename);
                }
                StateHasChanged();
                OCRLand();

            }
        }


    }
    private void ReviewSlides() {
        string json = JsonSerializer.Serialize(generatedFlashCards);

        NavManager.NavigateTo($"/review-flashcards");
    }
    private async void removeFlashCard(string flashcardName) {
        generatedFlashCards.Remove(generatedFlashCards.Find(x => x.Title.Contains(flashcardName)));
    }
    private async void OCRLand() {
        String OCRResult = "";
        var root = Directory.GetCurrentDirectory();
        var dotenv = Path.Combine(root, ".env");
        DotEnv.Load(options: new DotEnvOptions(envFilePaths: new[] { dotenv }));
        var envVars = DotEnv.Read();
        AzureKeyCredential credential = new AzureKeyCredential(envVars["key"]);
        DocumentAnalysisClient client = new DocumentAnalysisClient(new Uri(envVars["endpoint"]), credential);
        foreach (var file in loadedFiles) {
            var path = Path.Combine(FileEnvironment.ContentRootPath, FileEnvironment.EnvironmentName, "unsafe_uploads", file);
            FileStream fileObj = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);
            AnalyzeDocumentOperation operation = client.AnalyzeDocument(WaitUntil.Completed, "prebuilt-read", fileObj);
            AnalyzeResult result = operation.Value;
            OCRResult += result.Content;
            OCRResult += "\n";
        }
        System.Console.WriteLine(OCRResult);
        System.Console.WriteLine("========================================");

        GPTLand(envVars, OCRResult);

    }

    private async void GPTLand(IDictionary<string, string> envVars, string OCRResult) {

        StreamReader sr = new StreamReader(FileEnvironment.ContentRootPath+@"\prompt.txt");
        String prompt = sr.ReadToEnd() + OCRResult;


        ChatClient client = new(model: "gpt-4o-mini", envVars["gptKey"]);
        ChatCompletion completion = client.CompleteChat(prompt);
        System.Console.WriteLine(completion);
        FlashCardLand(completion.ToString());
    }
    private void FlashCardLand(String completion) {
        string titleRegex = @"(?<=T:\s)[^D:]+(?=\sD:)";
        string descriptionRegex = @"(?<=D:\s).*";
        MatchCollection titleMatches = Regex.Matches(completion, titleRegex);
        MatchCollection descriptionMatches = Regex.Matches(completion, descriptionRegex);
        for (var i = 0; i < titleMatches.Count; i++) {
            var currentTitleMatch = titleMatches[i].Groups[0].Value;
            var currentDescriptionMatch = descriptionMatches[i].Groups[0].Value;
            generatedFlashCards.Add(new FlashCard(currentTitleMatch, currentDescriptionMatch));
        }
        flashCardButtonDisabled = false;
        flashCardButtonText = "FlashCards are ready!";
        localStorage.ClearAsync();
        localStorage.SetItemAsync<List<FlashCard>>("generatedFlashCards", generatedFlashCards);
        StateHasChanged();
        
    }
}
